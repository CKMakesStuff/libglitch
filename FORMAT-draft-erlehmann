                                       Nils Dagsson Moskopp // erlehmann
                                         http://dieweltistgarnichtso.net
                                                           December 2010


 The application/x-glitch Media Type for the glitch file format

Status of This Memo

   This memo provides information for the Internet community.  It does
   not specify an Internet standard of any kind.  This memo is licensed
   under the Creative Commons Share-Alike license, either Version 3, or,
   at your option, any later version.

Abstract

   The glitch file format is a lightweight, text-based, language-
   independent program interchange format. It is used to specify
   programs to be executed on a stack machine that generates a
   bitstream. The output is commonly interpreted as audio data.


1.  Introduction

   The glitch file format is a text format for the serialization of
   programs generating bitstreams. It is derived from the implementation
   of the iOS application Glitch Machine [GLITCHMACHINE].

   Programs noted in the glitch file format (glitches) contain
   instructions for a stack machine and integer constants. Its design
   goals were for it to be minimal, portable and textual.

   The glitch file format was intended to be usable in microblogging
   applications. Those commonly limit textual messages to 140 characters
   to force messages to be terse and discourage intelligent discourse
   [HTML].

1.1.  Conventions Used in This Document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

   The grammatical rules in this document are to be interpreted as
   described in [RFC4234].

2.   Glitch File Format Grammar

   A glitch consists of sequences of characters. In general, a glitch is
   written as follows:

   <title>!<instructions>

   Title names consist of a sequence of zero or more characters, with
   an upper limit of 16 characters. The lower case letters "a"--"z",
   digits and the character underscore ("_") are allowed.

   Instructions consist of one or more lines separated by exclamation
   marks ("!"), with an upper limit of 16 lines.

   Lines consist of a sequence of one or more characters, with an upper
   limit of 16 characters. The upper case letters "A"--"Z", lower case
   letters "a"--"z", numbers "0"--"9" and the period (".") are allowed.

2.1    BNF for the Glitch File Format

   alphalower     = %x61-7A

   glitch         = title %0x21 instructions [%x0A]
   title          = 0*16[alphalower | digit | %x5F]
   line           = 1*16[alpha | digit | %x2E]
   instructions   = 0*15[(line %0x21)] line

2.2.   Advice for Implementors

   Programs interpreting glitches SHOULD output a warning when
   encountering any title or line exceeding 16 characters. For
   robustness, programs SHOULD try to interpret such input, by
   truncating the title to 16 characters and splitting lines.

   Programs interpreting glitches SHOULD output a warning when
   encountering any character other than "A"--"Z", "a"--"z", "0"--"9",
   "_", ".", "!" or a single new line (LF) at the end of a file.

3.    Glitch Stack Machine

3.1.   Stack Machine

   […]

3.2.   Tokenizer

   […]

3.3.   Opcodes

   […]

3.4.   Execution

   [To be continued …]

4. IANA Considerations

   The MIME media type for the glitch file format is
   application/x-glitch.

   Type name: application

   Subtype name: x-glitch

   Required parameters: n/a

   Optional parameters: n/a

   Encoding considerations:

      A glitch MUST be represented using ASCII.


5.  Security Considerations

   The glitch file format does not in itself pose a security threat. Due
   to lack of branching and looping instructions a conforming
   implementation can not enter an infinite loop.

   Implementors SHOULD ensure their implementations handle variable
   overflows and underflows securely. Users SHOULD take note that there
   is no general guarantee that an implementation contains no security
   holes.

6.  Applications that use this media type

   The glitch file format has been used in libglitch [LIBGLITCH].


7.  References

7.1.   Normative References

   [RFC2119]   Bradner, S., "Key words for use in RFCs to Indicate
               Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC4234]   Crocker, D. and P.  Overell, "Augmented BNF for Syntax
               Specifications: ABNF", RFC 4234, October 2005.

7.2.   Informative References

   [GLITCHMACHINE]
               <http://madgarden.net/apps/glitch-machine/>

   [HTML]
               <http://www.whatwg.org/specs/web-apps/current-work/
               multipage/common-input-element-attributes.html
               #attr-input-maxlength>

   [LIBGLITCH] <http://github.com/erlehmann/libglitch>
